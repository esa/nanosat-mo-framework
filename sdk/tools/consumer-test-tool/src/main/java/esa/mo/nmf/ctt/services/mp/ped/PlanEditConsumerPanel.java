/* ----------------------------------------------------------------------------
 * Copyright (C) 2021      European Space Agency
 *                         European Space Operations Centre
 *                         Darmstadt
 *                         Germany
 * ----------------------------------------------------------------------------
 * System                : ESA NanoSat MO Framework
 * ----------------------------------------------------------------------------
 * Licensed under European Space Agency Public License (ESA-PL) Weak Copyleft â€“ v2.4
 * You may not use this file except in compliance with the License.
 *
 * Except as expressly set forth in this License, the Software is provided to
 * You on an "as is" basis and without warranties of any kind, including without
 * limitation merchantability, fitness for a particular purpose, absence of
 * defects or errors, accuracy or non-infringement of intellectual property rights.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ----------------------------------------------------------------------------
 */
package esa.mo.nmf.ctt.services.mp.ped;

import java.io.InterruptedIOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import org.ccsds.moims.mo.mal.MALDecoder;
import org.ccsds.moims.mo.mal.MALEncoder;
import org.ccsds.moims.mo.mal.MALException;
import org.ccsds.moims.mo.mal.MALInteractionException;
import org.ccsds.moims.mo.mal.MALStandardError;
import org.ccsds.moims.mo.mal.structures.Element;
import org.ccsds.moims.mo.mal.structures.UOctet;
import org.ccsds.moims.mo.mal.structures.UShort;
import org.ccsds.moims.mo.mal.transport.MALMessageHeader;
import org.ccsds.moims.mo.mp.planedit.consumer.PlanEditAdapter;
import org.ccsds.moims.mo.mp.structures.ActivityInstanceDetails;
import org.ccsds.moims.mo.mp.structures.EventInstanceDetails;
import org.ccsds.moims.mo.mp.structures.PlanStatus;
import esa.mo.mp.impl.consumer.PlanEditConsumerServiceImpl;
import esa.mo.mp.impl.util.MPFactory;
import esa.mo.tools.mowindow.MOWindow;

/**
 * PlanEditConsumerPanel
 */
public class PlanEditConsumerPanel extends javax.swing.JPanel {

    private static final Logger LOGGER = Logger.getLogger(PlanEditConsumerPanel.class.getName());

    private final PlanEditConsumerServiceImpl planEditService;

    public PlanEditConsumerPanel(PlanEditConsumerServiceImpl planEditService) {
        initComponents();

        this.planEditService = planEditService;

        // jScrollPane2.setViewportView(this.planningRequestTable);
    }

    public void init() {
        // this.getRequestAllButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the formAddModifyParameter.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        actionDefinitionsTable = new javax.swing.JTable();
        parameterTab = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        insertActivityButton = new javax.swing.JButton();
        updateActivityButton = new javax.swing.JButton();
        deleteActivityButton = new javax.swing.JButton();
        insertEventButton = new javax.swing.JButton();
        updateEventButton = new javax.swing.JButton();
        deleteEventButton = new javax.swing.JButton();
        updatePlanStatusButton = new javax.swing.JButton();

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Plan Edit Service");
        jLabel6.setToolTipText("");

        jScrollPane2.setHorizontalScrollBar(null);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(796, 380));
        jScrollPane2.setRequestFocusEnabled(false);

        actionDefinitionsTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{{}, {}}, new String[]{

        }));
        actionDefinitionsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        actionDefinitionsTable.setAutoscrolls(false);
        actionDefinitionsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(actionDefinitionsTable);

        parameterTab.setLayout(new java.awt.GridLayout(1, 1));

        insertActivityButton.setText("insertActivity");
        insertActivityButton.addActionListener(this::insertActivityButtonActionPerformed);
        jPanel5.add(insertActivityButton);

        updateActivityButton.setText("updateActivity");
        updateActivityButton.addActionListener(this::updateActivityButtonActionPerformed);
        jPanel5.add(updateActivityButton);

        deleteActivityButton.setText("deleteActivity");
        deleteActivityButton.addActionListener(this::deleteActivityButtonActionPerformed);
        jPanel5.add(deleteActivityButton);

        insertEventButton.setText("insertEvent");
        insertEventButton.addActionListener(this::insertEventButtonActionPerformed);
        jPanel5.add(insertEventButton);

        updateEventButton.setText("updateEvent");
        updateEventButton.addActionListener(this::updateEventButtonActionPerformed);
        jPanel5.add(updateEventButton);

        deleteEventButton.setText("deleteEvent");
        deleteEventButton.addActionListener(this::deleteEventButtonActionPerformed);
        jPanel5.add(deleteEventButton);

        updatePlanStatusButton.setText("updatePlanStatus");
        updatePlanStatusButton.addActionListener(this::updatePlanStatusButtonActionPerformed);
        jPanel5.add(updatePlanStatusButton);

        parameterTab.add(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
            parameterTab, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE).addComponent(jScrollPane2,
                javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
            .createSequentialGroup().addContainerGap().addComponent(jLabel6).addGap(18, 18, 18).addComponent(
                jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE).addPreferredGap(
                    javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(parameterTab,
                        javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE)));
    }// </editor-fold>//GEN-END:initComponents

    private void insertActivityButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_insertActivityButtonActionPerformed
        Long planIdentityId = 1L;
        Long activityDefId = 1L;
        ActivityInstanceDetails activityInstance = MPFactory.createActivityInstance();

        InsertActivity insert = new InsertActivity(planIdentityId, activityDefId, activityInstance);

        MOWindow insertWindow = new MOWindow(insert, true);
        try {
            insert = (InsertActivity) insertWindow.getObject();
        } catch (InterruptedIOException e) {
            LOGGER.log(Level.SEVERE, null, e);
            return;
        }

        planIdentityId = insert.getPlanIdentityId();
        activityDefId = insert.getActivityDefId();
        activityInstance = insert.getActivityInstance();

        try {
            this.planEditService.getPlanEditStub().asyncInsertActivity(planIdentityId, activityDefId, activityInstance,
                new PlanEditAdapter() {
                    @Override
                    public void insertActivityAckReceived(MALMessageHeader msgHeader, Map qosProperties) {
                        JOptionPane.showMessageDialog(null, "Operation insertActivity was successful", "Info",
                            JOptionPane.PLAIN_MESSAGE);
                        LOGGER.log(Level.INFO, "insertActivity operation submitted");
                    }

                    @Override
                    public void insertActivityErrorReceived(MALMessageHeader msgHeader, MALStandardError error,
                        Map qosProperties) {
                        JOptionPane.showMessageDialog(null,
                            "There was an error during the insertActivity operation.\n" + error.toString(), "Error",
                            JOptionPane.PLAIN_MESSAGE);
                        LOGGER.log(Level.SEVERE, null, error);
                    }
                });
        } catch (MALInteractionException | MALException e) {
            LOGGER.log(Level.SEVERE, null, e);
        }
    }// GEN-LAST:event_insertActivityButtonActionPerformed

    private void updateActivityButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_updateActivityButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Operation updateActivity is not currently implemented", "Info",
            JOptionPane.PLAIN_MESSAGE);
    }// GEN-LAST:event_updateActivityButtonActionPerformed

    private void deleteActivityButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteActivityButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Operation deleteActivity is not currently implemented", "Info",
            JOptionPane.PLAIN_MESSAGE);
    }// GEN-LAST:event_deleteActivityButtonActionPerformed

    private void insertEventButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_insertEventButtonActionPerformed
        Long planIdentityId = 1L;
        Long eventDefId = 1L;
        EventInstanceDetails eventInstance = MPFactory.createEventInstance();

        InsertEvent insert = new InsertEvent(planIdentityId, eventDefId, eventInstance);

        MOWindow insertWindow = new MOWindow(insert, true);
        try {
            insert = (InsertEvent) insertWindow.getObject();
        } catch (InterruptedIOException e) {
            LOGGER.log(Level.SEVERE, null, e);
            return;
        }

        planIdentityId = insert.getPlanIdentityId();
        eventDefId = insert.getEventDefId();
        eventInstance = insert.getEventInstance();

        try {
            this.planEditService.getPlanEditStub().asyncInsertEvent(planIdentityId, eventDefId, eventInstance,
                new PlanEditAdapter() {
                    @Override
                    public void insertEventAckReceived(MALMessageHeader msgHeader, Map qosProperties) {
                        JOptionPane.showMessageDialog(null, "Operation insertEvent was successful", "Info",
                            JOptionPane.PLAIN_MESSAGE);
                        LOGGER.log(Level.INFO, "insertEvent operation submitted");
                    }

                    @Override
                    public void insertEventErrorReceived(MALMessageHeader msgHeader, MALStandardError error,
                        Map qosProperties) {
                        JOptionPane.showMessageDialog(null, "There was an error during the insertEvent operation.\n" +
                            error.toString(), "Error", JOptionPane.PLAIN_MESSAGE);
                        LOGGER.log(Level.SEVERE, null, error);
                    }
                });
        } catch (MALInteractionException | MALException e) {
            LOGGER.log(Level.SEVERE, null, e);
        }
    }// GEN-LAST:event_insertEventButtonActionPerformed

    private void updateEventButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_updateEventButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Operation updateEvent is not currently implemented", "Info",
            JOptionPane.PLAIN_MESSAGE);
    }// GEN-LAST:event_updateEventButtonActionPerformed

    private void deleteEventButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteEventButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Operation deleteEvent is not currently implemented", "Info",
            JOptionPane.PLAIN_MESSAGE);
    }// GEN-LAST:event_deleteEventButtonActionPerformed

    private void updatePlanStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_updatePlanStatusButtonActionPerformed
        Long planIdentityId = 1L;
        PlanStatus planStatus = PlanStatus.DRAFT;

        UpdatePlanStatus update = new UpdatePlanStatus(planIdentityId, planStatus);

        MOWindow updateWindow = new MOWindow(update, true);
        try {
            update = (UpdatePlanStatus) updateWindow.getObject();
        } catch (InterruptedIOException e) {
            LOGGER.log(Level.SEVERE, null, e);
            return;
        }

        planIdentityId = update.getPlanIdentityId();
        planStatus = update.getPlanStatus();

        try {
            this.planEditService.getPlanEditStub().asyncUpdatePlanStatus(planIdentityId, planStatus,
                new PlanEditAdapter() {
                    @Override
                    public void updatePlanStatusAckReceived(MALMessageHeader msgHeader, Map qosProperties) {
                        JOptionPane.showMessageDialog(null, "Operation updatePlanStatus was successful", "Info",
                            JOptionPane.PLAIN_MESSAGE);
                        LOGGER.log(Level.INFO, "updatePlanStatus operation submitted");
                    }

                    @Override
                    public void updatePlanStatusErrorReceived(MALMessageHeader msgHeader, MALStandardError error,
                        Map qosProperties) {
                        JOptionPane.showMessageDialog(null,
                            "There was an error during the updatePlanStatus operation.\n" + error.toString(), "Error",
                            JOptionPane.PLAIN_MESSAGE);
                        LOGGER.log(Level.SEVERE, null, error);
                    }
                });
        } catch (MALInteractionException | MALException e) {
            LOGGER.log(Level.SEVERE, null, e);
        }
    }// GEN-LAST:event_updatePlanStatusButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable actionDefinitionsTable;
    private javax.swing.JButton deleteActivityButton;
    private javax.swing.JButton deleteEventButton;
    private javax.swing.JButton insertActivityButton;
    private javax.swing.JButton insertEventButton;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel parameterTab;
    private javax.swing.JButton updateActivityButton;
    private javax.swing.JButton updateEventButton;
    private javax.swing.JButton updatePlanStatusButton;
    // End of variables declaration//GEN-END:variables

    static final class InsertActivity implements org.ccsds.moims.mo.mal.structures.Composite {

        public static final Integer TYPE_SHORT_FORM = null;
        public static final org.ccsds.moims.mo.mal.structures.UShort AREA_SHORT_FORM = new org.ccsds.moims.mo.mal.structures.UShort(
            5);
        public static final org.ccsds.moims.mo.mal.structures.UOctet AREA_VERSION = new org.ccsds.moims.mo.mal.structures.UOctet(
            (short) 1);
        public static final org.ccsds.moims.mo.mal.structures.UShort SERVICE_SHORT_FORM = new org.ccsds.moims.mo.mal.structures.UShort(
            0);
        public static final Long SHORT_FORM = 0L;
        private static final long serialVersionUID = 0L;
        private Long planIdentityId;
        private Long activityDefId;
        private org.ccsds.moims.mo.mp.structures.ActivityInstanceDetails activityInstance;

        public InsertActivity(Long planIdentityId, Long activityDefId,
            org.ccsds.moims.mo.mp.structures.ActivityInstanceDetails activityInstance) {
            this.planIdentityId = planIdentityId;
            this.activityDefId = activityDefId;
            this.activityInstance = activityInstance;
        }

        public Long getPlanIdentityId() {
            return planIdentityId;
        }

        public Long getActivityDefId() {
            return activityDefId;
        }

        public org.ccsds.moims.mo.mp.structures.ActivityInstanceDetails getActivityInstance() {
            return activityInstance;
        }

        @Override
        public Long getShortForm() {
            return SHORT_FORM;
        }

        @Override
        public UShort getAreaNumber() {
            return AREA_SHORT_FORM;
        }

        @Override
        public UOctet getAreaVersion() {
            return AREA_VERSION;
        }

        @Override
        public UShort getServiceNumber() {
            return SERVICE_SHORT_FORM;
        }

        @Override
        public Integer getTypeShortForm() {
            return TYPE_SHORT_FORM;
        }

        @Override
        public Element createElement() {
            return null;
        }

        @Override
        public void encode(MALEncoder encoder) throws MALException {

        }

        @Override
        public Element decode(MALDecoder decoder) throws MALException {
            return null;
        }
    }

    static final class InsertEvent implements org.ccsds.moims.mo.mal.structures.Composite {

        public static final Integer TYPE_SHORT_FORM = null;
        public static final org.ccsds.moims.mo.mal.structures.UShort AREA_SHORT_FORM = new org.ccsds.moims.mo.mal.structures.UShort(
            5);
        public static final org.ccsds.moims.mo.mal.structures.UOctet AREA_VERSION = new org.ccsds.moims.mo.mal.structures.UOctet(
            (short) 1);
        public static final org.ccsds.moims.mo.mal.structures.UShort SERVICE_SHORT_FORM = new org.ccsds.moims.mo.mal.structures.UShort(
            0);
        public static final Long SHORT_FORM = 0L;
        private static final long serialVersionUID = 0L;
        private Long planIdentityId;
        private Long eventDefId;
        private org.ccsds.moims.mo.mp.structures.EventInstanceDetails eventInstance;

        public InsertEvent(Long planIdentityId, Long eventDefId,
            org.ccsds.moims.mo.mp.structures.EventInstanceDetails eventInstance) {
            this.planIdentityId = planIdentityId;
            this.eventDefId = eventDefId;
            this.eventInstance = eventInstance;
        }

        public Long getPlanIdentityId() {
            return planIdentityId;
        }

        public Long getEventDefId() {
            return eventDefId;
        }

        public org.ccsds.moims.mo.mp.structures.EventInstanceDetails getEventInstance() {
            return eventInstance;
        }

        @Override
        public Long getShortForm() {
            return SHORT_FORM;
        }

        @Override
        public UShort getAreaNumber() {
            return AREA_SHORT_FORM;
        }

        @Override
        public UOctet getAreaVersion() {
            return AREA_VERSION;
        }

        @Override
        public UShort getServiceNumber() {
            return SERVICE_SHORT_FORM;
        }

        @Override
        public Integer getTypeShortForm() {
            return TYPE_SHORT_FORM;
        }

        @Override
        public Element createElement() {
            return null;
        }

        @Override
        public void encode(MALEncoder encoder) throws MALException {

        }

        @Override
        public Element decode(MALDecoder decoder) throws MALException {
            return null;
        }
    }

    static final class UpdatePlanStatus implements org.ccsds.moims.mo.mal.structures.Composite {

        public static final Integer TYPE_SHORT_FORM = null;
        public static final org.ccsds.moims.mo.mal.structures.UShort AREA_SHORT_FORM = new org.ccsds.moims.mo.mal.structures.UShort(
            5);
        public static final org.ccsds.moims.mo.mal.structures.UOctet AREA_VERSION = new org.ccsds.moims.mo.mal.structures.UOctet(
            (short) 1);
        public static final org.ccsds.moims.mo.mal.structures.UShort SERVICE_SHORT_FORM = new org.ccsds.moims.mo.mal.structures.UShort(
            0);
        public static final Long SHORT_FORM = 0L;
        private static final long serialVersionUID = 0L;
        private Long planIdentityId;
        private org.ccsds.moims.mo.mp.structures.PlanStatus planStatus;

        public UpdatePlanStatus(Long planIdentityId, org.ccsds.moims.mo.mp.structures.PlanStatus planStatus) {
            this.planIdentityId = planIdentityId;
            this.planStatus = planStatus;
        }

        public Long getPlanIdentityId() {
            return planIdentityId;
        }

        public org.ccsds.moims.mo.mp.structures.PlanStatus getPlanStatus() {
            return planStatus;
        }

        @Override
        public Long getShortForm() {
            return SHORT_FORM;
        }

        @Override
        public UShort getAreaNumber() {
            return AREA_SHORT_FORM;
        }

        @Override
        public UOctet getAreaVersion() {
            return AREA_VERSION;
        }

        @Override
        public UShort getServiceNumber() {
            return SERVICE_SHORT_FORM;
        }

        @Override
        public Integer getTypeShortForm() {
            return TYPE_SHORT_FORM;
        }

        @Override
        public Element createElement() {
            return null;
        }

        @Override
        public void encode(MALEncoder encoder) throws MALException {

        }

        @Override
        public Element decode(MALDecoder decoder) throws MALException {
            return null;
        }
    }
}
