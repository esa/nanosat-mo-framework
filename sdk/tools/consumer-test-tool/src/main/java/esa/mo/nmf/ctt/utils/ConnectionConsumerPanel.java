/* ----------------------------------------------------------------------------
 * Copyright (C) 2021      European Space Agency
 *                         European Space Operations Centre
 *                         Darmstadt
 *                         Germany
 * ----------------------------------------------------------------------------
 * System                : ESA NanoSat MO Framework
 * ----------------------------------------------------------------------------
 * Licensed under the European Space Agency Public License, Version 2.0
 * You may not use this file except in compliance with the License.
 *
 * Except as expressly set forth in this License, the Software is provided to
 * You on an "as is" basis and without warranties of any kind, including without
 * limitation merchantability, fitness for a particular purpose, absence of
 * defects or errors, accuracy or non-infringement of intellectual property rights.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 * ----------------------------------------------------------------------------
 */
package esa.mo.nmf.ctt.utils;

import esa.mo.com.impl.consumer.ArchiveConsumerServiceImpl;
import esa.mo.com.impl.consumer.EventConsumerServiceImpl;
import esa.mo.com.impl.util.COMServicesConsumer;
import esa.mo.nmf.ctt.services.com.ArchiveConsumerManagerPanel;
import esa.mo.nmf.ctt.services.com.EventConsumerPanel;
import esa.mo.nmf.ctt.services.mc.ActionConsumerPanel;
import esa.mo.nmf.ctt.services.mc.AggregationConsumerPanel;
import esa.mo.nmf.ctt.services.mc.AlertConsumerPanel;
import esa.mo.nmf.ctt.services.mc.ParameterConsumerPanel;
import esa.mo.nmf.ctt.services.mc.ParameterPublishedValues;
import esa.mo.nmf.ctt.services.mc.StatisticConsumerPanel;
import esa.mo.helpertools.connections.ConnectionConsumer;
import esa.mo.helpertools.connections.SingleConnectionDetails;
import esa.mo.mc.impl.consumer.ActionConsumerServiceImpl;
import esa.mo.mc.impl.consumer.AggregationConsumerServiceImpl;
import esa.mo.mc.impl.consumer.AlertConsumerServiceImpl;
import esa.mo.mc.impl.consumer.ParameterConsumerServiceImpl;
import esa.mo.mc.impl.consumer.StatisticConsumerServiceImpl;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import org.ccsds.moims.mo.com.archive.ArchiveHelper;
import org.ccsds.moims.mo.com.event.EventHelper;
import org.ccsds.moims.mo.mal.MALException;
import org.ccsds.moims.mo.mal.MALInteractionException;
import org.ccsds.moims.mo.mc.action.ActionHelper;
import org.ccsds.moims.mo.mc.aggregation.AggregationHelper;
import org.ccsds.moims.mo.mc.alert.AlertHelper;
import org.ccsds.moims.mo.mc.check.CheckHelper;
import org.ccsds.moims.mo.mc.parameter.ParameterHelper;
import org.ccsds.moims.mo.mc.statistic.StatisticHelper;

/**
 *
 * @author Cesar Coelho
 */
public class ConnectionConsumerPanel extends javax.swing.JPanel {

    private ConnectionConsumer connectionConsumer;
    private javax.swing.JTabbedPane tabs;
    private static final Logger LOGGER = Logger.getLogger(ConnectionConsumerPanel.class.getName());

    /**
     * Creates new form ConsumerPanelArchive
     *
     * @param connectionConsumer
     * @param tabs
     */
    public ConnectionConsumerPanel(ConnectionConsumer connectionConsumer, JTabbedPane tabs) {
        initComponents();
        this.connectionConsumer = connectionConsumer;
        this.tabs = tabs;

        try {
            this.connectionConsumer.loadURIs();
        } catch (MalformedURLException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.INFO, "The file with provider URIs is not present.");
        }

        this.refreshTextBoxAdresses();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        homeTab = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        uriServiceEvent = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        uriBrokerEvent = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        uriServiceArchive = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        uriBrokerArchive = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        uriServiceParameter = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        uriBrokerParameter = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        uriServiceAggregation = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        uriBrokerAggregation = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        uriServiceAction = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        uriBrokerAction = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        uriServiceAlert = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        uriBrokerAlert = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        uriServiceCheck = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        uriBrokerCheck = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        uriServiceStatistic = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        uriBrokerStatistic = new javax.swing.JTextField();
        servicesPanel = new javax.swing.JPanel();
        load_URI_links = new javax.swing.JButton();
        load_links_file = new javax.swing.JButton();
        find_replace = new javax.swing.JButton();
        checkBoxEvent = new javax.swing.JCheckBox();
        checkBoxArchive = new javax.swing.JCheckBox();
        checkBoxParameter = new javax.swing.JCheckBox();
        checkBoxAggregation = new javax.swing.JCheckBox();
        checkBoxAction = new javax.swing.JCheckBox();
        checkBoxAlert = new javax.swing.JCheckBox();
        checkBoxCheck = new javax.swing.JCheckBox();
        checkBoxStatistic = new javax.swing.JCheckBox();
        connectButton = new javax.swing.JButton();

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Communication Settings");
        jLabel7.setToolTipText("");

        homeTab.setMinimumSize(new java.awt.Dimension(200, 300));
        homeTab.setName(""); // NOI18N
        homeTab.setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel9.setPreferredSize(new java.awt.Dimension(550, 420));

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("Event Service URI:");
        jLabel27.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel27);

        uriServiceEvent.setPreferredSize(new java.awt.Dimension(350, 20));
        uriServiceEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriServiceEventActionPerformed(evt);
            }
        });
        jPanel9.add(uriServiceEvent);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Event Broker URI:");
        jLabel28.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel28);

        uriBrokerEvent.setPreferredSize(new java.awt.Dimension(350, 20));
        uriBrokerEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriBrokerEventActionPerformed(evt);
            }
        });
        jPanel9.add(uriBrokerEvent);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Archive Service URI:");
        jLabel25.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel25);

        uriServiceArchive.setPreferredSize(new java.awt.Dimension(350, 20));
        uriServiceArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriServiceArchiveActionPerformed(evt);
            }
        });
        jPanel9.add(uriServiceArchive);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("Archive Broker URI:");
        jLabel26.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel26);

        uriBrokerArchive.setPreferredSize(new java.awt.Dimension(350, 20));
        uriBrokerArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriBrokerArchiveActionPerformed(evt);
            }
        });
        jPanel9.add(uriBrokerArchive);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Parameter Service URI:");
        jLabel10.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel10);

        uriServiceParameter.setPreferredSize(new java.awt.Dimension(350, 20));
        uriServiceParameter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriServiceParameterActionPerformed(evt);
            }
        });
        jPanel9.add(uriServiceParameter);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Parameter Broker URI:");
        jLabel12.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel12);

        uriBrokerParameter.setPreferredSize(new java.awt.Dimension(350, 20));
        uriBrokerParameter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriBrokerParameterActionPerformed(evt);
            }
        });
        jPanel9.add(uriBrokerParameter);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Aggregation Service URI:");
        jLabel13.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel13);

        uriServiceAggregation.setPreferredSize(new java.awt.Dimension(350, 20));
        uriServiceAggregation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriServiceAggregationActionPerformed(evt);
            }
        });
        jPanel9.add(uriServiceAggregation);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Aggregation Broker URI:");
        jLabel14.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel14);

        uriBrokerAggregation.setPreferredSize(new java.awt.Dimension(350, 20));
        uriBrokerAggregation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriBrokerAggregationActionPerformed(evt);
            }
        });
        jPanel9.add(uriBrokerAggregation);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Action Service URI:");
        jLabel15.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel15);

        uriServiceAction.setPreferredSize(new java.awt.Dimension(350, 20));
        uriServiceAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriServiceActionActionPerformed(evt);
            }
        });
        jPanel9.add(uriServiceAction);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Action Broker URI:");
        jLabel16.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel16);

        uriBrokerAction.setPreferredSize(new java.awt.Dimension(350, 20));
        uriBrokerAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriBrokerActionActionPerformed(evt);
            }
        });
        jPanel9.add(uriBrokerAction);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Alert Service URI:");
        jLabel17.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel17);

        uriServiceAlert.setPreferredSize(new java.awt.Dimension(350, 20));
        uriServiceAlert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriServiceAlertActionPerformed(evt);
            }
        });
        jPanel9.add(uriServiceAlert);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Alert Broker URI:");
        jLabel18.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel18);

        uriBrokerAlert.setPreferredSize(new java.awt.Dimension(350, 20));
        uriBrokerAlert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriBrokerAlertActionPerformed(evt);
            }
        });
        jPanel9.add(uriBrokerAlert);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Check Service URI:");
        jLabel19.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel19);

        uriServiceCheck.setPreferredSize(new java.awt.Dimension(350, 20));
        uriServiceCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriServiceCheckActionPerformed(evt);
            }
        });
        jPanel9.add(uriServiceCheck);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Check Broker URI:");
        jLabel20.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel20);

        uriBrokerCheck.setPreferredSize(new java.awt.Dimension(350, 20));
        uriBrokerCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriBrokerCheckActionPerformed(evt);
            }
        });
        jPanel9.add(uriBrokerCheck);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Statistic Service URI:");
        jLabel21.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel21);

        uriServiceStatistic.setPreferredSize(new java.awt.Dimension(350, 20));
        uriServiceStatistic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriServiceStatisticActionPerformed(evt);
            }
        });
        jPanel9.add(uriServiceStatistic);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Statistic Broker URI:");
        jLabel22.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel9.add(jLabel22);

        uriBrokerStatistic.setPreferredSize(new java.awt.Dimension(350, 20));
        uriBrokerStatistic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriBrokerStatisticActionPerformed(evt);
            }
        });
        jPanel9.add(uriBrokerStatistic);

        homeTab.add(jPanel9);

        servicesPanel.setMinimumSize(new java.awt.Dimension(200, 340));
        servicesPanel.setName(""); // NOI18N
        servicesPanel.setPreferredSize(new java.awt.Dimension(200, 340));

        load_URI_links.setText("Reload Links");
        load_URI_links.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_URI_linksActionPerformed(evt);
            }
        });
        servicesPanel.add(load_URI_links);

        load_links_file.setText("Load Links from File");
        load_links_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_links_fileActionPerformed(evt);
            }
        });
        servicesPanel.add(load_links_file);

        find_replace.setText("Find & Replace all");
        find_replace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_replaceActionPerformed(evt);
            }
        });
        servicesPanel.add(find_replace);

        checkBoxEvent.setSelected(true);
        checkBoxEvent.setText("Event Service");
        checkBoxEvent.setPreferredSize(new java.awt.Dimension(160, 23));
        checkBoxEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxEventActionPerformed(evt);
            }
        });
        servicesPanel.add(checkBoxEvent);

        checkBoxArchive.setSelected(true);
        checkBoxArchive.setText("Archive Service");
        checkBoxArchive.setPreferredSize(new java.awt.Dimension(160, 23));
        servicesPanel.add(checkBoxArchive);

        checkBoxParameter.setSelected(true);
        checkBoxParameter.setText("Parameter Service");
        checkBoxParameter.setPreferredSize(new java.awt.Dimension(160, 23));
        servicesPanel.add(checkBoxParameter);

        checkBoxAggregation.setSelected(true);
        checkBoxAggregation.setText("Aggregation Service");
        checkBoxAggregation.setPreferredSize(new java.awt.Dimension(160, 23));
        checkBoxAggregation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAggregationActionPerformed(evt);
            }
        });
        servicesPanel.add(checkBoxAggregation);

        checkBoxAction.setSelected(true);
        checkBoxAction.setText("Action Service");
        checkBoxAction.setPreferredSize(new java.awt.Dimension(160, 23));
        checkBoxAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionActionPerformed(evt);
            }
        });
        servicesPanel.add(checkBoxAction);

        checkBoxAlert.setSelected(true);
        checkBoxAlert.setText("Alert Service");
        checkBoxAlert.setPreferredSize(new java.awt.Dimension(160, 23));
        checkBoxAlert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAlertActionPerformed(evt);
            }
        });
        servicesPanel.add(checkBoxAlert);

        checkBoxCheck.setSelected(true);
        checkBoxCheck.setText("Check Service");
        checkBoxCheck.setPreferredSize(new java.awt.Dimension(160, 23));
        checkBoxCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCheckActionPerformed(evt);
            }
        });
        servicesPanel.add(checkBoxCheck);

        checkBoxStatistic.setSelected(true);
        checkBoxStatistic.setText("Statistic Service");
        checkBoxStatistic.setPreferredSize(new java.awt.Dimension(160, 23));
        checkBoxStatistic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxStatisticActionPerformed(evt);
            }
        });
        servicesPanel.add(checkBoxStatistic);

        connectButton.setText("Connect to Provider");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        servicesPanel.add(connectButton);

        homeTab.add(servicesPanel);
        servicesPanel.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(homeTab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(homeTab, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void uriServiceParameterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriServiceParameterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriServiceParameterActionPerformed

    private void uriBrokerParameterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriBrokerParameterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriBrokerParameterActionPerformed

    private void uriServiceAggregationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriServiceAggregationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriServiceAggregationActionPerformed

    private void uriBrokerAggregationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriBrokerAggregationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriBrokerAggregationActionPerformed

    private void uriServiceArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriServiceArchiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriServiceArchiveActionPerformed

    private void uriBrokerArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriBrokerArchiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriBrokerArchiveActionPerformed

    private void checkBoxAggregationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAggregationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxAggregationActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed

        this.updatePropertiesAddress();
        SingleConnectionDetails details;
        ConnectionConsumer con = new ConnectionConsumer();
        try {
            con.loadURIs();
        } catch (MalformedURLException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.INFO, "The file with provider URIs is not present.");
        }
        
        
        ArchiveConsumerServiceImpl archiveService = null;
        if (checkBoxArchive.isSelected()) {
            try {
                details = connectionConsumer.getServicesDetails().get(ArchiveHelper.ARCHIVE_SERVICE_NAME);
                archiveService = new ArchiveConsumerServiceImpl(details);

                ArchiveConsumerManagerPanel panel2 = new ArchiveConsumerManagerPanel(archiveService);
                this.tabs.insertTab("Archive Manager", null, panel2, "Archive Tab", tabs.getTabCount());
            } catch (MALException ex) {
                errorConnectionProvider("Archive");
                return;
            } catch (MalformedURLException ex) {
                errorConnectionProvider("Archive");
                return;
            }
        }

        EventConsumerServiceImpl eventService = null;
        if (checkBoxEvent.isSelected()) {
            try {
                details = connectionConsumer.getServicesDetails().get(EventHelper.EVENT_SERVICE_NAME);
                eventService = new EventConsumerServiceImpl(details);
                this.tabs.insertTab("Event service", null, new EventConsumerPanel(eventService, archiveService), "Event Tab", tabs.getTabCount());
            } catch (MALInteractionException ex) {
                errorConnectionProvider("Event");
                return;
            } catch (MALException ex) {
                errorConnectionProvider("Event");
                return;
            } catch (MalformedURLException ex) {
                errorConnectionProvider("Event");
                return;
            }
        }

        COMServicesConsumer comServices = new COMServicesConsumer();
        comServices.setServices(eventService, archiveService);

        ParameterConsumerServiceImpl parameterService = null;

        // M&C services
        if (checkBoxAction.isSelected()) {
            try {
                details = connectionConsumer.getServicesDetails().get(ActionHelper.ACTION_SERVICE_NAME);
                ActionConsumerServiceImpl actionService = new ActionConsumerServiceImpl(details, comServices);

                this.tabs.insertTab("Action service", null, new ActionConsumerPanel(actionService), "Action Tab", tabs.getTabCount());
            } catch (MALInteractionException ex) {
                errorConnectionProvider("Action");
                return;
            } catch (MALException ex) {
                errorConnectionProvider("Action");
                return;
            } catch (MalformedURLException ex) {
                errorConnectionProvider("Action");
                return;
            }
        }

        if (checkBoxParameter.isSelected()) {
            try {
                details = connectionConsumer.getServicesDetails().get(ParameterHelper.PARAMETER_SERVICE_NAME);
                parameterService = new ParameterConsumerServiceImpl(details, comServices);

                this.tabs.insertTab("Parameter service", null, new ParameterConsumerPanel(parameterService), "Parameter Tab", tabs.getTabCount());
                this.tabs.insertTab("Published Parameter Service", null, new ParameterPublishedValues(parameterService), "Published Parameters Tab", tabs.getTabCount());
            } catch (MALException ex) {
                errorConnectionProvider("Parameter");
                return;
            } catch (MALInteractionException ex) {
                errorConnectionProvider("Parameter");
                return;
            } catch (MalformedURLException ex) {
                errorConnectionProvider("Parameter");
                return;
            }
        }

        if (checkBoxAggregation.isSelected()) {
            try {
                details = connectionConsumer.getServicesDetails().get(AggregationHelper.AGGREGATION_SERVICE_NAME);
                AggregationConsumerServiceImpl aggregationService = new AggregationConsumerServiceImpl(details, comServices);

                this.tabs.insertTab("Aggregation service", null, new AggregationConsumerPanel(aggregationService), "Aggregation Tab", tabs.getTabCount());
            } catch (MALInteractionException ex) {
                errorConnectionProvider("Aggregation");
                return;
            } catch (MALException ex) {
                errorConnectionProvider("Aggregation");
                return;
            } catch (MalformedURLException ex) {
                errorConnectionProvider("Aggregation");
                return;
            }
        }

        if (checkBoxAlert.isSelected()) {
            try {
                details = connectionConsumer.getServicesDetails().get(AlertHelper.ALERT_SERVICE_NAME);
                AlertConsumerServiceImpl alertService = new AlertConsumerServiceImpl(details, comServices);

                this.tabs.insertTab("Alert service", null, new AlertConsumerPanel(alertService), "Alert Tab", tabs.getTabCount());
            } catch (MALInteractionException ex) {
                errorConnectionProvider("Alert");
                return;
            } catch (MALException ex) {
                errorConnectionProvider("Alert");
                return;
            } catch (MalformedURLException ex) {
                errorConnectionProvider("Alert");
                return;
            }
        }


        /*        
         if (checkBoxCheck.isSelected()){
         try {
         details = this.connectionConsumer.getServicesDetails().getCheckService();
         CheckConsumerServiceImpl checkService = new CheckConsumerServiceImpl(details, parameterService);
                
         this.tabs.insertTab("Check service", null, new CheckConsumerPanel(checkService), "Check Tab", tabs.getTabCount());
         } catch (MALInteractionException | MALException | MalformedURLException ex) {
         errorConnectionProvider("Check");
         return;
         }
         }
         */
        if (checkBoxStatistic.isSelected()) {
            try {
                details = connectionConsumer.getServicesDetails().get(StatisticHelper.STATISTIC_SERVICE_NAME);
                StatisticConsumerServiceImpl statisticService = new StatisticConsumerServiceImpl(details, comServices);

                this.tabs.insertTab("Statistic service", null, new StatisticConsumerPanel(statisticService, parameterService), "Statistic Tab", tabs.getTabCount());
            } catch (MALInteractionException ex) {
                errorConnectionProvider("Statistic");
                return;
            } catch (MALException ex) {
                errorConnectionProvider("Statistic");
                return;
            } catch (MalformedURLException ex) {
                errorConnectionProvider("Statistic");
                return;
            }
        }
/*
        try {
            details = connectionConsumer.getServicesDetails().get(ConfigurationHelper.CONFIGURATION_SERVICE_NAME);
            ConfigurationConsumerServiceImpl configurationService = new ConfigurationConsumerServiceImpl(details, comServices);

            this.tabs.insertTab("Configuration service", null, new ConfigurationConsumerPanel(configurationService), "Configuration Tab", tabs.getTabCount());
        } catch (MALInteractionException | MALException | MalformedURLException ex) {
            errorConnectionProvider("Configuration");
            return;
        }
*/
        
        
    }//GEN-LAST:event_connectButtonActionPerformed

    private void errorConnectionProvider(String service) {
        JOptionPane.showMessageDialog(null, "Could not connect to " + service + " service provider!", "Error!", JOptionPane.PLAIN_MESSAGE);
    }

    private void checkBoxEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxEventActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxEventActionPerformed

    private void checkBoxActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxActionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxActionActionPerformed

    private void uriServiceEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriServiceEventActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriServiceEventActionPerformed

    private void uriBrokerEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriBrokerEventActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriBrokerEventActionPerformed

    private void uriServiceActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriServiceActionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriServiceActionActionPerformed

    private void uriBrokerActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriBrokerActionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriBrokerActionActionPerformed

    private void uriServiceAlertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriServiceAlertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriServiceAlertActionPerformed

    private void uriBrokerAlertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriBrokerAlertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriBrokerAlertActionPerformed

    private void uriServiceCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriServiceCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriServiceCheckActionPerformed

    private void uriBrokerCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriBrokerCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriBrokerCheckActionPerformed

    private void checkBoxAlertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAlertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxAlertActionPerformed

    private void checkBoxCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxCheckActionPerformed

    private void uriServiceStatisticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriServiceStatisticActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriServiceStatisticActionPerformed

    private void uriBrokerStatisticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriBrokerStatisticActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uriBrokerStatisticActionPerformed

    private void checkBoxStatisticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxStatisticActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxStatisticActionPerformed

    private void load_URI_linksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_URI_linksActionPerformed

        try {
            this.connectionConsumer.loadURIs();
        } catch (MalformedURLException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.INFO, "The file with provider URIs is not present.");
        }

        this.refreshTextBoxAdresses();

    }//GEN-LAST:event_load_URI_linksActionPerformed


    private void find_replaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_replaceActionPerformed

        String find = (String) JOptionPane.showInputDialog(
                null,
                "Match the text:\n",
                "Find",
                JOptionPane.QUESTION_MESSAGE,
                null,
                null,
                "");

        String replace = (String) JOptionPane.showInputDialog(
                null,
                "Replace with:\n",
                "Replace",
                JOptionPane.QUESTION_MESSAGE,
                null,
                null,
                "");

        uriServiceEvent.setText(uriServiceEvent.getText().replace(find, replace));
        uriBrokerEvent.setText(uriBrokerEvent.getText().replace(find, replace));
        uriServiceArchive.setText(uriServiceArchive.getText().replace(find, replace));
        uriBrokerArchive.setText(uriBrokerArchive.getText().replace(find, replace));

        uriServiceAction.setText(uriServiceAction.getText().replace(find, replace));
        uriBrokerAction.setText(uriBrokerAction.getText().replace(find, replace));
        uriServiceParameter.setText(uriServiceParameter.getText().replace(find, replace));
        uriBrokerParameter.setText(uriBrokerParameter.getText().replace(find, replace));
        uriServiceAlert.setText(uriServiceAlert.getText().replace(find, replace));
        uriBrokerAlert.setText(uriBrokerAlert.getText().replace(find, replace));
        uriServiceCheck.setText(uriServiceCheck.getText().replace(find, replace));
        uriBrokerCheck.setText(uriBrokerCheck.getText().replace(find, replace));
        uriServiceStatistic.setText(uriServiceStatistic.getText().replace(find, replace));
        uriBrokerStatistic.setText(uriBrokerStatistic.getText().replace(find, replace));
        uriServiceAggregation.setText(uriServiceAggregation.getText().replace(find, replace));
        uriBrokerAggregation.setText(uriBrokerAggregation.getText().replace(find, replace));

        updatePropertiesAddress();

    }//GEN-LAST:event_find_replaceActionPerformed

    private void load_links_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_links_fileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_load_links_fileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxAction;
    private javax.swing.JCheckBox checkBoxAggregation;
    private javax.swing.JCheckBox checkBoxAlert;
    private javax.swing.JCheckBox checkBoxArchive;
    private javax.swing.JCheckBox checkBoxCheck;
    private javax.swing.JCheckBox checkBoxEvent;
    private javax.swing.JCheckBox checkBoxParameter;
    private javax.swing.JCheckBox checkBoxStatistic;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton find_replace;
    private javax.swing.JPanel homeTab;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton load_URI_links;
    private javax.swing.JButton load_links_file;
    private javax.swing.JPanel servicesPanel;
    private javax.swing.JTextField uriBrokerAction;
    private javax.swing.JTextField uriBrokerAggregation;
    private javax.swing.JTextField uriBrokerAlert;
    private javax.swing.JTextField uriBrokerArchive;
    private javax.swing.JTextField uriBrokerCheck;
    private javax.swing.JTextField uriBrokerEvent;
    private javax.swing.JTextField uriBrokerParameter;
    private javax.swing.JTextField uriBrokerStatistic;
    private javax.swing.JTextField uriServiceAction;
    private javax.swing.JTextField uriServiceAggregation;
    private javax.swing.JTextField uriServiceAlert;
    private javax.swing.JTextField uriServiceArchive;
    private javax.swing.JTextField uriServiceCheck;
    private javax.swing.JTextField uriServiceEvent;
    private javax.swing.JTextField uriServiceParameter;
    private javax.swing.JTextField uriServiceStatistic;
    // End of variables declaration//GEN-END:variables

    private void updatePropertiesAddress() {
        SingleConnectionDetails details;

        // COM services
        details = connectionConsumer.getServicesDetails().get(EventHelper.EVENT_SERVICE_NAME);
        if (details != null) {
            this.connectionConsumer.getServicesDetails().get(EventHelper.EVENT_SERVICE_NAME).setProviderURI(uriServiceEvent.getText());
            this.connectionConsumer.getServicesDetails().get(EventHelper.EVENT_SERVICE_NAME).setBrokerURI(uriBrokerEvent.getText());
        }

        details = connectionConsumer.getServicesDetails().get(ArchiveHelper.ARCHIVE_SERVICE_NAME);
        if (details != null) {
            this.connectionConsumer.getServicesDetails().get(ArchiveHelper.ARCHIVE_SERVICE_NAME).setProviderURI(uriServiceArchive.getText());
            this.connectionConsumer.getServicesDetails().get(ArchiveHelper.ARCHIVE_SERVICE_NAME).setBrokerURI(uriBrokerArchive.getText());
        }
        
        // M&C services
        details = connectionConsumer.getServicesDetails().get(ActionHelper.ACTION_SERVICE_NAME);
        if (details != null) {
            this.connectionConsumer.getServicesDetails().get(ActionHelper.ACTION_SERVICE_NAME).setProviderURI(uriServiceAction.getText());
            this.connectionConsumer.getServicesDetails().get(ActionHelper.ACTION_SERVICE_NAME).setBrokerURI(uriBrokerAction.getText());
        }

        details = connectionConsumer.getServicesDetails().get(ParameterHelper.PARAMETER_SERVICE_NAME);
        if (details != null) {
            this.connectionConsumer.getServicesDetails().get(ParameterHelper.PARAMETER_SERVICE_NAME).setProviderURI(uriServiceParameter.getText());
            this.connectionConsumer.getServicesDetails().get(ParameterHelper.PARAMETER_SERVICE_NAME).setBrokerURI(uriBrokerParameter.getText());
        }

        details = connectionConsumer.getServicesDetails().get(AlertHelper.ALERT_SERVICE_NAME);
        if (details != null) {
            this.connectionConsumer.getServicesDetails().get(AlertHelper.ALERT_SERVICE_NAME).setProviderURI(uriServiceAlert.getText());
            this.connectionConsumer.getServicesDetails().get(AlertHelper.ALERT_SERVICE_NAME).setBrokerURI(uriBrokerAlert.getText());
        }

        details = connectionConsumer.getServicesDetails().get(CheckHelper.CHECK_SERVICE_NAME);
        if (details != null) {
            this.connectionConsumer.getServicesDetails().get(CheckHelper.CHECK_SERVICE_NAME).setProviderURI(uriServiceCheck.getText());
            this.connectionConsumer.getServicesDetails().get(CheckHelper.CHECK_SERVICE_NAME).setBrokerURI(uriBrokerCheck.getText());
        }

        details = connectionConsumer.getServicesDetails().get(StatisticHelper.STATISTIC_SERVICE_NAME);
        if (details != null) {
            this.connectionConsumer.getServicesDetails().get(StatisticHelper.STATISTIC_SERVICE_NAME).setProviderURI(uriServiceStatistic.getText());
            this.connectionConsumer.getServicesDetails().get(StatisticHelper.STATISTIC_SERVICE_NAME).setBrokerURI(uriBrokerStatistic.getText());
        }

        details = connectionConsumer.getServicesDetails().get(AggregationHelper.AGGREGATION_SERVICE_NAME);
        if (details != null) {
            this.connectionConsumer.getServicesDetails().get(AggregationHelper.AGGREGATION_SERVICE_NAME).setProviderURI(uriServiceAggregation.getText());
            this.connectionConsumer.getServicesDetails().get(AggregationHelper.AGGREGATION_SERVICE_NAME).setBrokerURI(uriBrokerAggregation.getText());
        }
        

    }

    private void refreshTextBoxAdresses() {

        SingleConnectionDetails details;

        // COM services
        details = connectionConsumer.getServicesDetails().get(EventHelper.EVENT_SERVICE_NAME);
        if (details != null) {
            this.uriServiceEvent.setText(details.getProviderURI().toString());
            this.uriBrokerEvent.setText(details.getBrokerURI().toString());
        }

        details = connectionConsumer.getServicesDetails().get(ArchiveHelper.ARCHIVE_SERVICE_NAME);
        if (details != null) {
            this.uriServiceArchive.setText(details.getProviderURI().toString());
            this.uriBrokerArchive.setText(details.getBrokerURI().toString());
        }

        // M&C services
        details = connectionConsumer.getServicesDetails().get(ActionHelper.ACTION_SERVICE_NAME);
        if (details != null) {
            this.uriServiceAction.setText(details.getProviderURI().toString());
            this.uriBrokerAction.setText(details.getBrokerURI().toString());
        }

        details = connectionConsumer.getServicesDetails().get(ParameterHelper.PARAMETER_SERVICE_NAME);
        if (details != null) {
            this.uriServiceParameter.setText(details.getProviderURI().toString());
            this.uriBrokerParameter.setText(details.getBrokerURI().toString());
        }

        details = connectionConsumer.getServicesDetails().get(AlertHelper.ALERT_SERVICE_NAME);
        if (details != null) {
            this.uriServiceAlert.setText(details.getProviderURI().toString());
            this.uriBrokerAlert.setText(details.getBrokerURI().toString());
        }

        details = connectionConsumer.getServicesDetails().get(CheckHelper.CHECK_SERVICE_NAME);
        if (details != null) {
            this.uriServiceCheck.setText(details.getProviderURI().toString());
            this.uriBrokerCheck.setText(details.getBrokerURI().toString());
        }

        details = connectionConsumer.getServicesDetails().get(StatisticHelper.STATISTIC_SERVICE_NAME);
        if (details != null) {
            this.uriServiceStatistic.setText(details.getProviderURI().toString());
            this.uriBrokerStatistic.setText(details.getBrokerURI().toString());
        }

        details = connectionConsumer.getServicesDetails().get(AggregationHelper.AGGREGATION_SERVICE_NAME);
        if (details != null) {
            this.uriServiceAggregation.setText(details.getProviderURI().toString());
            this.uriBrokerAggregation.setText(details.getBrokerURI().toString());
        }


    }

}
